# palindrome_validator.py
# Prompt-Engineered Palindrome Validator
# This script demonstrates a refined palindrome checking function using prompt engineering.
# See README.md for details on the refinement process using Role, Constraints, Critiqueâ†’Refine.

def is_palindrome(s):
    """
    Checks if a string is a palindrome, ignoring case and non-alphanumeric characters.
    
    Args:
        s (str): Input string to check.
    
    Returns:
        bool: True if palindrome, False otherwise.
    
    Raises:
        TypeError: If input is not a string.
    """
    if not isinstance(s, str):
        raise TypeError("Input must be a string")
    if len(s) == 0:
        return True
    # Clean non-alphanumeric and lowercase
    cleaned = ''.join(c.lower() for c in s if c.isalnum())
    if len(cleaned) == 0:
        return True
    left, right = 0, len(cleaned) - 1
    while left < right:
        if cleaned[left] != cleaned[right]:
            return False
        left += 1
        right -= 1
    return True


# Test cases
def run_tests():
    test_cases = [
        ("racecar", True),
        ("hello", False),
        ("A man a plan a canal Panama", True),
        ("", True),
        ("a", True),
        ("12321", True),
        ("12345", False),
        (None, TypeError),  # Should raise TypeError
        (42, TypeError),    # Should raise TypeError
    ]
    
    print("Running test cases...")
    for s, expected in test_cases[:-2]:  # Skip the error cases for now
        try:
            result = is_palindrome(s)
            status = "PASS" if result == expected else "FAIL"
            print(f"is_palindrome('{s}') -> {result} (Expected: {expected}) [{status}]")
        except TypeError:
            print(f"is_palindrome('{s}') -> Raised TypeError (Expected: TypeError) [PASS]")
    
    print("\nAll tests completed!")


if __name__ == "__main__":
    run_tests()
